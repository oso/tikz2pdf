#!/usr/bin/env python
#
# vim:ts=4 sw=4 expandtab
#
# Copyright (c) 2013, Olivier Sobrie <olivier@sobrie.be>
# Copyright (c) 2007, Hans Meine <hans_meine@gmx.net>
#  All rights reserved.
#
# This is licensed according to the new BSD license.
# Please send patches / comments, I would be happy about any feedback.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the University of Hamburg nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys
import os
import subprocess
import glob
import time
import optparse
import subprocess
import tempfile

DEFAULT_PDFVIEWER_CMD = "zathura"
DEFAULT_TEMPLATE_FILE = os.path.expanduser("~/.tikz2pdf.tex")
DEFAULT_TEMPLATE = r"""\documentclass[a4paper,10pt]{article}
\usepackage[utf8x]{inputenc}
\usepackage{pgfplots}
\usepackage{pgfplotstable}
\usepackage{pgf}
\usepackage{gnuplot-lua-tikz}
\pgfplotsset{compat=newest}
\usepackage{tikz,nicefrac,amsmath,pifont}
\usetikzlibrary{arrows,snakes,backgrounds,patterns,matrix,shapes,fit,calc,shadows,plotmarks,decorations.pathmorphing,plotmarks,external}
\usepackage[graphics,tightpage,active]{preview}
\usepackage{tabularx}
\PreviewEnvironment{tikzpicture}
\newlength{\imagewidth}
\newlength{\imagescale}

\begin{document}

\input{%s}

\end{document}
"""

verbose = False
tmpfile = None

def log_error(msg):
    sys.stderr.write(msg)

def log_info(msg):
    if verbose is False:
        return

    sys.stderr.write(msg)

def which(program):
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None

def find_template():
    current = os.getcwd()
    while current != "/":
        candidate = os.path.join(current, ".tikz2pdf.tex")
        if os.path.isfile(candidate):
            log_info("Using template %s\n" % candidate)
            return candidate

        current = os.path.split(current)[0]

    return None

def remove_tempfile():
    if tmpfile is None:
        return

    for temp in glob.glob(os.path.splitext(tmpfile.name)[0] + ".*"):
        os.unlink(temp)

def generate_pdf(pdfcmd, template, tikzfile, output_file):
    global tmpfile
    global verbose

    tmpfile = tempfile.NamedTemporaryFile(prefix = os.getcwd() + "/tikz2pdf_",
                                          suffix=".tex")
    buf = template % tikzfile
    tmpfile.write(buf.encode('utf-8'))
    tmpfile.flush()

    texname = tmpfile.name
    pdfname = os.path.splitext(texname)[0] + ".pdf"

    if verbose is True:
        out = sys.stderr
    else:
        out = tempfile.TemporaryFile()

    rc = subprocess.call([pdfcmd, "-shell-escape", "-halt-on-error",
                          texname], stdout = out, stderr = out)
    if rc:
        log_error("ERROR generating %s with pdflatex (rc = %d)\n"
                  % (output_file, rc))

        if out is not sys.stderr:
            out.seek(0)
            sys.stderr.write(out.read().decode("utf-8"))
            out.close()

        tmpfile.close()
        remove_tempfile()
        return rc

    tmpfile.close()

    os.rename(pdfname, output_file)
    remove_tempfile()

    log_info("Successfully generated %s\n" % output_file)

    return 0

def start_pdfviewer(output_file):
    subprocess.Popen(DEFAULT_PDFVIEWER_CMD +  " %s" % output_file,
                     shell = True)

if __name__ == "__main__":
    op = optparse.OptionParser(usage="%prog [options] foo.tikz")
    op.add_option("-v", "--verbose", action = "store_true",
                  dest = "verbose", default = False,
                  help = "verbose output")
    op.add_option("-o", "--once", action = "store_true",
                  dest = "once", default = False,
                  help = "only convert once and exit (obsolete)")
    op.add_option("-w", "--watch", action = "store_true",
                  dest = "watch", default = False,
                  help = "watch tikz file and procude a new pdf if it has changed")
    op.add_option("-s", "--view", action = "store_true",
                  dest = "view", default = False,
                  help = "start viewer after first successful compilation")
    op.add_option("-f", "--file", action = "store",
                  dest = "output_file", default = None,
                  help = "ouput file name")

    options, args = op.parse_args()

    verbose = options.verbose

    if len(args) == 0:
        log_error("No input file specified!\n")
        exit(1)

    tikzfile = os.path.realpath(args[0])
    if not os.path.isfile(tikzfile):
        log_error("Invalid file! (%s)\n" % tikzfile)
        exit(1)

    directory = os.path.dirname(tikzfile) + os.sep

    if options.output_file is None:
	    options.output_file = os.path.splitext(tikzfile)[0] + ".pdf"

    options.output_file = os.path.realpath(options.output_file)

    os.chdir(directory)

    if which('lualatex') is not None:
        pdfcmd = 'lualatex'
    elif which('pdflatex') is not None:
        pdfcmd = 'pdflatex'
    else:
        log_error("Neither 'lualtex' nor 'pdflatex' have been found")
        exit(1)

    log_info("Using '%s'\n" % pdfcmd)

    template_file = find_template()
    if template_file is not None:
	    template = open(template_file, 'r').read()
    elif os.path.isfile(DEFAULT_TEMPLATE_FILE):
	    template = open(templateFilename, 'r').read()
    else:
        template = DEFAULT_TEMPLATE

    if options.watch is False or options.once is True:
        rc = generate_pdf(pdfcmd, template, tikzfile, options.output_file)
        if rc == 0 and options.view is True:
            start_pdfviewer(options.output_file)
    else:
        previous_time = None
        try:
            while True:
                try:
                    current_time = os.path.getmtime(tikzfile)
                except OSError:
                    time.sleep(1)
                    continue

                if current_time == previous_time:
                    time.sleep(1)
                    continue

                rc = generate_pdf(pdfcmd, template, tikzfile,
                                  options.output_file)
                if rc == 0 and options.view is True:
                    start_pdfviewer(options.output_file)
                    options.view = False

                previous_time = current_time
        except KeyboardInterrupt:
            remove_tempfile()
            pass

    exit(rc)
